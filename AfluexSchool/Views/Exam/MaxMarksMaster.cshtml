@model AfluexSchool.Models.Exam

@{
    ViewBag.Title = "MaxMarksMaster";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .errortext{
        border:1px solid red!important;
        background-color:#fab8b8!important;
    }
</style>

@using (Html.BeginForm("MaxMarksMaster", "Exam", FormMethod.Post, new { @id = "form1", enctype = "multipart/form-data" }))
{
    <div class="container-fluid">
        <div class="row page-titles mx-0">
            <div class="col-sm-6 p-md-0">
                <div class="welcome-text">
                    <h3><b>Max/Passing Marks</b></h3>
                </div>
            </div>
            <div class="col-sm-6 p-md-0 justify-content-sm-end mt-2 mt-sm-0 d-flex">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="javascript:void(0)">Exam</a></li>
                    <li class="breadcrumb-item active"><a href="javascript:void(0)">Maximum Marks</a></li>
                </ol>
            </div>
        </div>
        <div class="card shadow">
            <div class="card-body">
                <p style="color:red">
                    @TempData["MaxMarksMaster"]
                </p>
                <form>
                    <div class="form-row">
                        <div class="form-group col-md-3">
                            <label>Class<span style="color:red">*</span></label>
                            @Html.DropDownListFor(m => m.ClassName, new SelectList(ViewBag.ddlClass, "Value", "Text"), new { @class = "form-control" })
                            @Html.HiddenFor(m => m.Pk_MaxMarksId)
                        </div>
                        <div class="form-group col-md-3">
                            <label>Exam Type<span style="color:red">*</span></label>
                            @Html.DropDownListFor(m => m.ExamTypeName, new SelectList(ViewBag.ddlExamType, "Value", "Text"), new { @class = "form-control" })
                        </div>
                        <div class="form-group col-md-3">
                            <label>Max Marks<span style="color:red">*</span></label>
                            @Html.TextBoxFor(m => m.MaxMarksExam, new { @class = "form-control", @placeholder = "Enter Marks in Exam", @onkeypress = "return isNumberKey(event)", @maxlength = "4", })
                        </div>
                        <div class="form-group col-md-3">
                            <label>Passing Marks<span style="color:red">*</span></label>
                            @Html.TextBoxFor(m => m.MinMarks, new { @class = "form-control", @placeholder = "Passing Marks ", @onkeypress = "return isNumberKey(event)", @maxlength = "4" })
                        </div>
                        <div class="form-group col-md-3">
                            @if (Model == null)
                            {
                                <input type="submit" id="btnSave" class="btn btn-success" onclick="return validateform();" name="btnSave" value="Save" />
                            }
                            else
                            {
                                <input type="submit" id="btnUpdate" class="btn btn-success" onclick="return validateformUpdate();" name="btnUpdate" value="Update" />
                            }
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

}

<script>

    $(document).ready(function () {
        $("#divload").css({ 'display': 'none' });

    });
    function validateform() {
        $(".errortext").removeClass("errortext");
        if ($('#ClassName').val() == '0') {
            $("#ClassName").addClass('errortext');
            $('#ClassName').focus();
            return false;
        }

        if ($('#ExamTypeName').val() == '0') {
            $("#ExamTypeName").addClass('errortext');
            $('#ExamTypeName').focus();
            return false;
        }
        if ($('#MaxMarksExam').val() == '') {
            $("#MaxMarksExam").addClass('errortext');
            $('#MaxMarksExam').focus();
            return false;
        }
        if ($('#MinMarks').val() == '') {
            $("#MinMarks").addClass('errortext');
            $('#MinMarks').focus();
            return false;
        }

        return true;
    }

    function isNumberKey(evt) {

        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

</script>